package my.test.balana;

import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

import org.jtwig.JtwigModel;
import org.jtwig.JtwigTemplate;
import org.jtwig.environment.DefaultEnvironmentConfiguration;
import org.jtwig.environment.Environment;
import org.jtwig.environment.EnvironmentConfiguration;
import org.jtwig.environment.EnvironmentFactory;
import org.jtwig.resource.reference.ResourceReference;

/**
 * XACML policy generator for Balana testing
 * Created by ipatini on 31/07/2016.
 */
public class GenPolicies
{
    public static void main( String[] args ) throws Exception
    {
		System.out.println("\nGenerating test XACML policy and policy set files...\n");
		int howmany;
		if (args.length==0) {		// Generate the simplest meaningful policy file possible
			howmany = generateFiles(0, 1, 0, 1, 0, 1);
		} else
		if (args.length>=6) {		// Generate policy sets and policies according to parameters
			int p = 0;
			int policySetNum = Integer.parseInt(args[p++]);
			int policyNum = Integer.parseInt(args[p++]);
			int policyTargetAttrs = Integer.parseInt(args[p++]);
			int rulesPerPolicy = Integer.parseInt(args[p++]);
			int targetAttrsPerRule = Integer.parseInt(args[p++]);
			int conditionsPerRule = Integer.parseInt(args[p++]);
			
			String pIdPat = null;
			String pVerPat = null;
			String pDescrPat = null;
			String pFilePat = null;
			if (args.length>p && !args[p].trim().isEmpty()) pIdPat = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) pVerPat = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) pDescrPat = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) pFilePat = args[p++].trim();
			
			String psIdPat = null;
			String psVerPat = null;
			String psDescrPat = null;
			String psFilePat = null;
			if (args.length>p && !args[p].trim().isEmpty()) psIdPat = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) psVerPat = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) psDescrPat = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) psFilePat = args[p++].trim();
			
			String pOutDir = null;
			String pTempl = null;
			String psTempl = null;
			if (args.length>p && !args[p].trim().isEmpty()) pOutDir = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) pTempl = args[p++].trim();
			if (args.length>p && !args[p].trim().isEmpty()) psTempl = args[p++].trim();
			
			howmany = generateFiles(policySetNum, policyNum, policyTargetAttrs, rulesPerPolicy, targetAttrsPerRule, conditionsPerRule,
									pIdPat, pVerPat, pDescrPat, pFilePat, psIdPat, psVerPat, psDescrPat, psFilePat, pOutDir, pTempl, psTempl);
		} else 
		{							// Generate a reasonable mix of policy sets and policies of the indicated size/order 
			int factor = 1;
			if (args.length>0 && !args[0].trim().isEmpty()) factor = Integer.parseInt(args[0].trim());
			howmany = generateFiles( factor );
		}
		System.out.printf("\n%d files generated\n\n", howmany);
	}
	
	private static int generateFiles(int factor) throws java.io.FileNotFoundException
	{
		int policySetNum = 2 * factor;
		int policyNum = 3 * factor;
		int policyTargetAttrs = 2 * factor;
		int rulesPerPolicy = 3 * factor;
		int targetAttrsPerRule = 3 * factor;
		int conditionsPerRule = 5 * factor;
		
		return generateFiles(policySetNum, policyNum, policyTargetAttrs, rulesPerPolicy, targetAttrsPerRule, conditionsPerRule, null, null, null, null, null, null, null, null, null, null, null);
	}
		
	private static int generateFiles(int policySetNum, int policyNum, int policyTargetAttrs, int rulesPerPolicy, int targetAttrsPerRule, int conditionsPerRule) throws java.io.FileNotFoundException
	{
		return generateFiles(policySetNum, policyNum, policyTargetAttrs, rulesPerPolicy, targetAttrsPerRule, conditionsPerRule, null, null, null, null, null, null, null, null, null, null, null);
	}
	
	private static int generateFiles(int policySetNum, int policyNum, int policyTargetAttrs, int rulesPerPolicy, int targetAttrsPerRule, int conditionsPerRule,
									String pIdPat, String pVerPat, String pDescrPat, String pFilePat, String psIdPat, String psVerPat, String psDescrPat, String psFilePat,
									String pOutDir, String pTempl, String psTempl)
		throws java.io.FileNotFoundException
	{
		String genMsg = "Generated by "+GenPolicies.class.getName();
		String genTm = new java.util.Date().toString();
		int fileGenerated = 0;
		
		if (pIdPat==null) pIdPat = "test-policy-%d";
		if (pVerPat==null) pVerPat = "1.0";
		if (pDescrPat==null) pDescrPat = "Test Policy #%d";
		if (pFilePat==null) pFilePat = "test-policy-%04d.xml";
		if (psIdPat==null) psIdPat = "test-policy-set-%d";
		if (psVerPat==null) psVerPat = "1.0";
		if (psDescrPat==null) psDescrPat = "Test Policy Set #%d";
		if (psFilePat==null) psFilePat = "test-policy-set-%04d.xml";
		if (pOutDir==null) pOutDir = "policies/"; else if (!pOutDir.endsWith("/")) pOutDir = pOutDir+"/";
		if (pTempl==null) pTempl = "policies/templates/policy.twig";
		if (psTempl==null) psTempl = "policies/templates/policy-set.twig";
		
		LinkedList<TargetAttr> policyTargetAttributes = new LinkedList<TargetAttr>();
		for (int i=1; i<=policyTargetAttrs; i++) {
			String aId = i%2==1 ? "urn:oasis:names:tc:xacml:1.0:resource:resource-id" : "urn:oasis:names:tc:xacml:1.0:subject:subject-id";
			String cat = i%2==1 ? "urn:oasis:names:tc:xacml:3.0:attribute-category:resource" : "urn:oasis:names:tc:xacml:1.0:subject-category:access-subject";
			String val = i%2==1 ? "file://*" : "admin";
			String match = i%2==1 ? "urn:oasis:names:tc:xacml:1.0:function:string-regexp-match" : "urn:oasis:names:tc:xacml:1.0:function:string-equal";
			policyTargetAttributes.add(new TargetAttr(aId, cat, val, match));
		}
		
		LinkedList<TargetAttr> ruleTargetAttributes = new LinkedList<TargetAttr>();
		for (int i=1; i<=targetAttrsPerRule; i++) {
			String match = i%2==1 ? "urn:oasis:names:tc:xacml:1.0:function:string-regexp-match" : "urn:oasis:names:tc:xacml:1.0:function:string-equal";
			String aId = i%3==1 ? "urn:oasis:names:tc:xacml:1.0:resource:resource-id" :
							i%3==2 ? "urn:oasis:names:tc:xacml:1.0:action:action-id" : "urn:oasis:names:tc:xacml:1.0:subject:subject-id";
			String cat = i%3==1 ? "urn:oasis:names:tc:xacml:3.0:attribute-category:resource" :
							i%3==2 ? "urn:oasis:names:tc:xacml:3.0:attribute-category:action" : "urn:oasis:names:tc:xacml:1.0:subject-category:access-subject";
			String val = i%3==1 ? "file://example/mde/record/patient/.*" :
							i%3==2 ? "read" : "admin";
			ruleTargetAttributes.add(new TargetAttr(aId, cat, val, match));
		}
		LinkedList<Condition> ruleConditions = new LinkedList<Condition>();
		List<String> values = java.util.Arrays.asList( new String[]{"read", "write", "delete"} );
		for (int i=1; i<=conditionsPerRule; i++) {
			String cId, cat, func1, func2, func3, val, dt;
			switch (i%5) {
				case 1:
					cId = "urn:oasis:names:tc:xacml:1.0:subject:subject-id";
					cat = "urn:oasis:names:tc:xacml:1.0:subject-category:access-subject";
					func1 = "urn:oasis:names:tc:xacml:1.0:function:any-of";
					func2 = "urn:oasis:names:tc:xacml:1.0:function:string-equal";
					val = "admin";
					ruleConditions.add(new Condition(cId, cat, val, func1, func2));
					break;
				case 2:
					cId = "urn:oasis:names:tc:xacml:1.0:action:action-id";
					cat = "urn:oasis:names:tc:xacml:3.0:attribute-category:action";
					func1 = "urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of";
					func2 = "urn:oasis:names:tc:xacml:1.0:function:string-bag";
					ruleConditions.add(new Condition(cId, cat, values, func1, func2));
					break;
				case 3:
					cId = "urn:oasis:names:tc:xacml:1.0:environment:current-time";
					cat = "urn:oasis:names:tc:xacml:3.0:attribute-category:environment";
					dt = "http://www.w3.org/2001/XMLSchema#time";
					val = "09:00:00+02:00";
					func1 = "urn:oasis:names:tc:xacml:1.0:function:time-greater-than-or-equal";
					func3 = "urn:oasis:names:tc:xacml:1.0:function:time-one-and-only";
					ruleConditions.add( new Condition(cId, cat, val, func1)
																	.setFunction3(func3)
																	.setDatatype(dt) );
					break;
				case 4:
					cId = "urn:oasis:names:tc:xacml:1.0:environment:current-time";
					cat = "urn:oasis:names:tc:xacml:3.0:attribute-category:environment";
					dt = "http://www.w3.org/2001/XMLSchema#time";
					val = "16:00:00+02:00";
					func1 = "urn:oasis:names:tc:xacml:1.0:function:time-less-than-or-equal";
					func3 = "urn:oasis:names:tc:xacml:1.0:function:time-one-and-only";
					ruleConditions.add( new Condition(cId, cat, val, func1)
																	.setFunction3(func3)
																	.setDatatype(dt) );
					break;
				default:
					cId = "urn:oasis:names:tc:xacml:1.0:subject:subject-id";
					cat = "urn:oasis:names:tc:xacml:1.0:subject-category:access-subject";
					val = "^([a-zA-Z0-9_.-])+@simpsons.com";
					func1 = "urn:oasis:names:tc:xacml:1.0:function:any-of";
					func2 = "urn:oasis:names:tc:xacml:1.0:function:string-regexp-match";
					ruleConditions.add( new Condition(cId, cat, val, func1, func2) );
					break;
			}
		}
		LinkedList<Rule> policyRules = new LinkedList<Rule>();
		for (int i=1; i<=rulesPerPolicy; i++) {
			String rId = "Rule-"+i;
			String effect = i%2==1 ? "Permit" : "Deny";
			String op = i%2==1 ? "urn:oasis:names:tc:xacml:1.0:function:and" : "urn:oasis:names:tc:xacml:1.0:function:or";
			Rule r = new Rule(rId, effect, ruleTargetAttributes, ruleConditions, op);
			policyRules.add(r);
		}
		
		// -------------------------------------------------------------------------------------------
		// Environment
		EnvironmentConfiguration configuration = new DefaultEnvironmentConfiguration();
		EnvironmentFactory environmentFactory = new EnvironmentFactory();
		Environment environment = environmentFactory.create(configuration);

		// Resource for Policies
		String templateFile = pTempl;
		String outputDir = pOutDir;
		String templateStr = new java.util.Scanner(new java.io.File(templateFile)).useDelimiter("\\Z").next();
		ResourceReference resource = new ResourceReference( ResourceReference.STRING, templateStr );

		// Template
		JtwigTemplate jtwigTemplate = new JtwigTemplate(environment, resource);

		// Generate policies and save them in policy files
		List<String> policySetPolicies = new LinkedList<String>();
		for (int pNum=1; pNum<=policyNum; pNum++) {
			String policyId = String.format( pIdPat, pNum);
			policySetPolicies.add( policyId );
			String policyRuleCombAlg = pNum%3==1 ? "urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable" : 
											pNum%3==2 ? "urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:permit-unless-deny" :
													"urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit";
			String policyVersion = String.format( pVerPat, pNum);
			String policyDescr = String.format( pDescrPat, pNum);
			String policyFile = String.format( pFilePat, pNum);
			
			// Model
			JtwigModel model = JtwigModel.newModel()
										.with("generationMessage", genMsg)
										.with("generationTimestamp", genTm)
										.with("policyId", policyId)
										.with("policyRuleCombAlg", policyRuleCombAlg)
										.with("policyVersion", policyVersion)
										.with("policyDescription", policyDescr)
										.with("policyTargetAttributes", policyTargetAttributes)
										.with("policyRules", policyRules)
										;
			// Output
			String output = jtwigTemplate.render(model);
			//System.out.println(output);
			try(java.io.PrintStream ps = new java.io.PrintStream( outputDir+policyFile )) { ps.println(output); fileGenerated++; }
		}
		
		// -------------------------------------------------------------------------------------------
		// Resource for Policy Sets
		templateFile = psTempl;
		templateStr = new java.util.Scanner(new java.io.File(templateFile)).useDelimiter("\\Z").next();
		resource = new ResourceReference( ResourceReference.STRING, templateStr );

		// Template
		jtwigTemplate = new JtwigTemplate(environment, resource);

		// Generate policy sets and save them in policy set files
		List<String> policySetPolicySets = new LinkedList<String>();
		List<TargetAttr> policySetTargetAttributes = policyTargetAttributes;
		for (int psNum=1; psNum<=policySetNum; psNum++) {
			String policySetId = String.format( psIdPat, psNum);
			String policySetPolicyCombAlg = psNum%2==1 ? "urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:permit-overrides" : 
											"urn:oasis:names:tc:xacml:1.0:policy-combining-algorithm:deny-overrides";
			String policySetVersion = String.format( psVerPat, psNum);
			String policySetDescr = String.format( psDescrPat, psNum);
			String policySetFile = String.format( psFilePat, psNum);;
			
			// Model
			JtwigModel model = JtwigModel.newModel()
										.with("generationMessage", genMsg)
										.with("generationTimestamp", genTm)
										.with("policySetId", policySetId)
										.with("policySetVersion", policySetVersion)
										.with("policySetPolicyCombAlg", policySetPolicyCombAlg)
										.with("policySetDescription", policySetDescr)
										.with("policySetTargetAttributes", policySetTargetAttributes)
										.with("policySetPolicies", policySetPolicies)
										.with("policySetPolicySets", policySetPolicySets)
										;
			// Output
			String output = jtwigTemplate.render(model);
			//System.out.println(output);
			try(java.io.PrintStream ps = new java.io.PrintStream( outputDir+policySetFile )) { ps.println(output); fileGenerated++; }
			
			policySetPolicySets.add( policySetId );
		}
		
		return fileGenerated;
	}
	
	private static class TargetAttr {
		String id;
		String category;
		String datatype;
		String value;
		String match;
		boolean mandatory;
		
		public TargetAttr(String id, String cat, String val, String match) {
			this(id, cat, "http://www.w3.org/2001/XMLSchema#string", val, match, true);
		}
		public TargetAttr(String id, String cat, String dt, String val, String match, boolean mandatory) {
			this.id = id;
			this.category = cat;
			this.datatype = dt;
			this.value = val;
			this.match = match;
			this.mandatory = mandatory;
		}
	}
	private static class Condition extends TargetAttr {
		String function1;
		String function2;
		String function3;
		List<String> values;
		
		public Condition(String id, String cat, String val, String func1) { this(id, cat, val, null, func1, null); }
		public Condition(String id, String cat, String val, String func1, String func2) { this(id, cat, val, null, func1, func2); }
		public Condition(String id, String cat, List<String> values, String func1, String func2) { this(id, cat, null, values, func1, func2); }
		private Condition(String id, String cat, String val, List<String> values, String func1, String func2) {
			super(id, cat, val, null);
			this.values = values;
			function1 = func1;
			function2 = func2;
		}
		public Condition setDatatype(String dt) { this.datatype=dt; return this; }
		public Condition setFunction3(String func3) { this.function3=func3; return this; }
	}
	private static class Rule {
		String id;
		String effect;
		List<TargetAttr> targetAttributes;
		List<Condition> conditions;
		String conditionsOp;
		
		public Rule(String id, String effect, List<TargetAttr> attr, List<Condition> cond, String op) {
			this.id = id;
			this.effect = effect;
			this.targetAttributes = attr;
			this.conditions = cond;
			this.conditionsOp = op;
		}
	}
}
